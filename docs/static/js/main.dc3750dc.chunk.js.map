{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","center","fromLonLat","zoom","view","setView","features","setFeatures","features2","setFeatures2","initial","noDefaultControls","className","onChange","e","console","log","zIndex","map","f","geometry","Point","longitude","latitude","id","feature","onClick","filter","prev","Math","random","coords","Bastille","Montmartre","unique_id","App2","React","Object","keys","Feature","name","uid","vectorRef","useRef","Fragment","href","getCoordinateFromPixel","pixel","push","ref","RStyle","RCircle","radius","RFill","color","idx","findIndex","x","get","target","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc3750dc.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { fromLonLat } from 'ol/proj';\nimport 'ol/ol.css';\nimport { RMap, RLayerVector, RFeature, ROverlay, ROSM, RStyle } from 'rlayers';\nimport Point from 'ol/geom/Point';\nimport './App.css';\nimport { Feature } from 'ol';\nimport { Coordinate } from 'ol/coordinate';\n\ninterface CustomFeature {\n\tid: number,\n\tlongitude: number,\n\tlatitude: number\n}\n\nexport const App = () => {\n\n\tconst [view, setView] = useState({ center: fromLonLat([9.5, 51.3]), zoom: 8 });\n\tconst [features, setFeatures] = useState<CustomFeature[]>([]);\n\tconst [features2, setFeatures2] = useState<CustomFeature[]>([]);\n\n\treturn <>\n\t\t<h1>Example with ROverlay (crashes)</h1>\n\t\t<RMap\n\t\t\tinitial={view}\n\t\t\tview={[view, setView]}\n\t\t\tnoDefaultControls={true}\n\t\t\tclassName=\"map\">\n\t\t\t<ROSM />\n\n\t\t\t<RLayerVector\n\t\t\t\tonChange={e => console.log(e)}\n\t\t\t\tzIndex={10}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tfeatures.map(f => <RFeature key={f.id} geometry={new Point(fromLonLat([f.longitude, f.latitude]))}>\n\t\t\t\t\t\t{/*\n\t\t\t\t\t\t\tAdding an ROverlay to a feature will cause a crash when a feature is removed\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t<ROverlay>\n\t\t\t\t\t\t\t<div>{f.id}</div>\n\t\t\t\t\t\t</ROverlay>\n\t\t\t\t\t</RFeature>)\n\t\t\t\t}\n\t\t\t</RLayerVector>\n\t\t</RMap>\n\t\t<div>\n\t\t\t{\n\t\t\t\tfeatures.map(feature => <div>\n\t\t\t\t\t{feature.id}\n\t\t\t\t\t<button onClick={() => setFeatures(features.filter(f => f !== feature))}>Remove</button>\n\t\t\t\t</div>)\n\t\t\t}\n\t\t\t<button onClick={\n\t\t\t\t() => setFeatures((prev) => [\n\t\t\t\t\t...prev,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: Math.random(),\n\t\t\t\t\t\tlongitude: 9.5 - 0.5 + Math.random(),\n\t\t\t\t\t\tlatitude: 51.3 - 0.5 + Math.random()\n\t\t\t\t\t}])\n\t\t\t}>\n\t\t\t\tAdd\n\t\t\t</button>\n\t\t</div>\n\n\t\t<h1>Example without ROverlay (works)</h1>\n\t\t<RMap\n\t\t\tinitial={view}\n\t\t\tview={[view, setView]}\n\t\t\tnoDefaultControls={true}\n\t\t\tclassName=\"map\">\n\t\t\t<ROSM />\n\n\t\t\t<RLayerVector\n\t\t\t\tonChange={e => console.log(e)}\n\t\t\t\tzIndex={10}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tfeatures2.map(f => <RFeature key={f.id} geometry={new Point(fromLonLat([f.longitude, f.latitude]))}></RFeature>)\n\t\t\t\t}\n\t\t\t</RLayerVector>\n\t\t</RMap>\n\t\t<div>\n\t\t\t{\n\t\t\t\tfeatures2.map(feature => <div>\n\t\t\t\t\t{feature.id}\n\t\t\t\t\t<button onClick={() => setFeatures2(features2.filter(f => f !== feature))}>Remove</button>\n\t\t\t\t</div>)\n\t\t\t}\n\t\t\t<button onClick={\n\t\t\t\t() => setFeatures2((prev) => [\n\t\t\t\t\t...prev,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: Math.random(),\n\t\t\t\t\t\tlongitude: 9.5 - 0.5 + Math.random(),\n\t\t\t\t\t\tlatitude: 51.3 - 0.5 + Math.random()\n\t\t\t\t\t}])\n\t\t\t}>\n\t\t\t\tAdd\n\t\t\t</button>\n\t\t</div>\n\t</>\n}\n\n\nexport const coords: Record<string, Coordinate> = {\n\t\"Arc de Triomphe\": [2.295, 48.8737],\n\t\"Place d'Italie\": [2.355, 48.831],\n\tBastille: [2.369, 48.853],\n\t\"Tour Eiffel\": [2.294, 48.858],\n\tMontmartre: [2.342, 48.887],\n};\n\nlet unique_id = 0;\n\nexport function App2(): JSX.Element {\n\t// The features must be part of the state as they will be modified\n\tconst [features, setFeatures] = React.useState(() =>\n\t\tObject.keys(coords).map(\n\t\t\t(f) =>\n\t\t\t\tnew Feature({\n\t\t\t\t\tgeometry: new Point(fromLonLat(coords[f])),\n\t\t\t\t\tname: f,\n\t\t\t\t\tuid: unique_id++,\n\t\t\t\t})\n\t\t)\n\t);\n\tconst vectorRef = React.useRef() as React.RefObject<RLayerVector>;\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h1>Example from <a href=\"https://mmomtchev.github.io/rlayers/#/add_delete\">https://mmomtchev.github.io/rlayers/#/add_delete</a> with added ROverlay (crashes)</h1>\n\t\t\t<RMap\n\t\t\t\tclassName=\"map\"\n\t\t\t\tinitial={{ center: fromLonLat([2.364, 48.82]), zoom: 11 }}\n\t\t\t\tonClick={(e) => {\n\n\t\t\t\t\tconst coords = e.map.getCoordinateFromPixel(e.pixel);\n\t\t\t\t\tfeatures.push(\n\t\t\t\t\t\tnew Feature({ geometry: new Point(coords), uid: unique_id++ })\n\t\t\t\t\t);\n\t\t\t\t\t// Why not setFeatures(features) ?\n\t\t\t\t\t// Because it won't have any effect -\n\t\t\t\t\t// unless you artificially create a new array\n\t\t\t\t\t// React won't know that something changed\n\t\t\t\t\tsetFeatures([...features]);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ROSM />\n\n\t\t\t\t<RLayerVector ref={vectorRef}>\n\t\t\t\t\t<RStyle.RStyle>\n\t\t\t\t\t\t<RStyle.RCircle radius={3}>\n\t\t\t\t\t\t\t<RStyle.RFill color={\"red\"} />\n\t\t\t\t\t\t</RStyle.RCircle>\n\t\t\t\t\t</RStyle.RStyle>\n\t\t\t\t\t{features.map((f) => (\n\t\t\t\t\t\t<RFeature\n\t\t\t\t\t\t\t// This is the very important part: if we are going to be\n\t\t\t\t\t\t\t// adding or deleting features, we must have a key field\n\t\t\t\t\t\t\t// that won't be transient - we can't use the array index, as\n\t\t\t\t\t\t\t// it will change every time we delete a feature in the middle\n\t\t\t\t\t\t\tkey={f.get(\"uid\")}\n\t\t\t\t\t\t\tfeature={f}\n\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t// This the deletion\n\t\t\t\t\t\t\t\tconst idx = features.findIndex(\n\t\t\t\t\t\t\t\t\t(x) => x.get(\"uid\") === e.target.get(\"uid\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\t\t\t\tfeatures.splice(idx, 1);\n\t\t\t\t\t\t\t\t\tsetFeatures([...features]);\n\t\t\t\t\t\t\t\t\t// It is very important to return false to stop the\n\t\t\t\t\t\t\t\t\t// event propagation - otherwise that same event will\n\t\t\t\t\t\t\t\t\t// also trigger the Map onClick\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ROverlay>\n\t\t\t\t\t\t\t\t<div>{f.get(\"uid\")}</div>\n\t\t\t\t\t\t\t</ROverlay>\n\t\t\t\t\t\t</RFeature>\n\t\t\t\t\t))}\n\t\t\t\t</RLayerVector>\n\t\t\t</RMap>\n\t\t\t<div className=\"mx-0 mt-0 mb-3 p-1 w-100 jumbotron shadow shadow\">\n\t\t\t\t<p>\n\t\t\t\t\tClick an empty space to add a monument or click a monument to delete\n\t\t\t\t\tit.\n\t\t</p>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App, App2 } from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n        <App2 />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}